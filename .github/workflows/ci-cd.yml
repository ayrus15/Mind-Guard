name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        app: [frontend, backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ matrix.app }}/package-lock.json

    - name: Install dependencies
      run: |
        cd ${{ matrix.app }}
        npm ci

    - name: Run linting
      run: |
        cd ${{ matrix.app }}
        npm run lint

    - name: Run tests
      run: |
        cd ${{ matrix.app }}
        npm test
      env:
        NODE_ENV: test

    - name: Generate test coverage
      if: matrix.app == 'backend'
      run: |
        cd ${{ matrix.app }}
        npm run test:coverage

    - name: Upload coverage reports
      if: matrix.app == 'backend'
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        fail_ci_if_error: false

  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    strategy:
      matrix:
        app: [frontend, backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ matrix.app }}/package-lock.json

    - name: Install dependencies
      run: |
        cd ${{ matrix.app }}
        npm ci

    - name: Build application
      run: |
        cd ${{ matrix.app }}
        npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.app }}-build
        path: |
          ${{ matrix.app }}/dist
          ${{ matrix.app }}/build
        retention-days: 1

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker images
      uses: docker/bake-action@v4
      with:
        files: |
          ./docker-bake.hcl
        targets: all
        push: true
        set: |
          *.cache-from=type=gha
          *.cache-to=type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment"
        # Add deployment steps here (e.g., AWS ECS, Heroku, etc.)

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment"
        # Add deployment steps here (e.g., AWS ECS, Heroku, etc.)

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'